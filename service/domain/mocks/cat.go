// Code generated by MockGen. DO NOT EDIT.
// Source: service/domain/cat.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/keitaro1020/lambda-golang-slf-example/service/domain"
	reflect "reflect"
)

// MockCatClient is a mock of CatClient interface
type MockCatClient struct {
	ctrl     *gomock.Controller
	recorder *MockCatClientMockRecorder
}

// MockCatClientMockRecorder is the mock recorder for MockCatClient
type MockCatClientMockRecorder struct {
	mock *MockCatClient
}

// NewMockCatClient creates a new mock instance
func NewMockCatClient(ctrl *gomock.Controller) *MockCatClient {
	mock := &MockCatClient{ctrl: ctrl}
	mock.recorder = &MockCatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatClient) EXPECT() *MockCatClientMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockCatClient) Search(ctx context.Context) (domain.Cats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx)
	ret0, _ := ret[0].(domain.Cats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockCatClientMockRecorder) Search(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCatClient)(nil).Search), ctx)
}

// MockCatRepository is a mock of CatRepository interface
type MockCatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCatRepositoryMockRecorder
}

// MockCatRepositoryMockRecorder is the mock recorder for MockCatRepository
type MockCatRepositoryMockRecorder struct {
	mock *MockCatRepository
}

// NewMockCatRepository creates a new mock instance
func NewMockCatRepository(ctrl *gomock.Controller) *MockCatRepository {
	mock := &MockCatRepository{ctrl: ctrl}
	mock.recorder = &MockCatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatRepository) EXPECT() *MockCatRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockCatRepository) Get(ctx context.Context, id domain.CatID) (*domain.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCatRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCatRepository)(nil).Get), ctx, id)
}

// GetAll mocks base method
func (m *MockCatRepository) GetAll(ctx context.Context) (domain.Cats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(domain.Cats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockCatRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCatRepository)(nil).GetAll), ctx)
}

// CreateInTx mocks base method
func (m *MockCatRepository) CreateInTx(ctx context.Context, tx domain.Tx, cat *domain.Cat) (*domain.Cat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInTx", ctx, tx, cat)
	ret0, _ := ret[0].(*domain.Cat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInTx indicates an expected call of CreateInTx
func (mr *MockCatRepositoryMockRecorder) CreateInTx(ctx, tx, cat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInTx", reflect.TypeOf((*MockCatRepository)(nil).CreateInTx), ctx, tx, cat)
}
